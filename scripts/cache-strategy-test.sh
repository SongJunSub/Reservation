#!/bin/bash

# Ï∫êÏãú Ï†ÑÎûµ ÏÑ±Îä• ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏
# Îã§ÏñëÌïú Ï∫êÏãú Ï†ÑÎûµÏùÑ ÌÜµÌï¥ JPA vs R2DBCÏùò Ï∫êÏãú ÌôúÏö© ÏÑ±Îä•ÏùÑ ÎπÑÍµê Î∂ÑÏÑù

set -e

# ÏÉâÏÉÅ ÏΩîÎìú Ï†ïÏùò
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Î°úÍ≥† Ï∂úÎ†•
print_logo() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                      üöÄ Ï∫êÏãú Ï†ÑÎûµ ÏÑ±Îä• Î∂ÑÏÑù ÎèÑÍµ¨                            ‚ïë"
    echo "‚ïë                                                                              ‚ïë"
    echo "‚ïë            JPA vs R2DBC Ï∫êÏãú Ï†ÑÎûµÎ≥Ñ ÏÑ±Îä• ÎπÑÍµê Î∞è ÏµúÏ†ÅÌôî Î∂ÑÏÑù                ‚ïë"
    echo "‚ïë                                                                              ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}\n"
}

# ÎèÑÏõÄÎßê Ï∂úÎ†•
print_help() {
    echo -e "${CYAN}ÏÇ¨Ïö©Î≤ï:${NC}"
    echo "  $0 [Î™®Îìú] [ÏòµÏÖò]"
    echo ""
    echo -e "${CYAN}Î™®Îìú:${NC}"
    echo "  full           - Ï†ÑÏ≤¥ Ï∫êÏãú Ï†ÑÎûµ ÏÑ±Îä• ÎπÑÍµê (Í∏∞Î≥∏Í∞í)"
    echo "  hit-ratio      - Ï∫êÏãú ÌûàÌä∏Ïú® ÏµúÏ†ÅÌôî Î∂ÑÏÑù"
    echo "  distributed    - Î∂ÑÏÇ∞ Ï∫êÏãú(Redis) vs Î°úÏª¨ Ï∫êÏãú ÎπÑÍµê"
    echo "  local          - Î°úÏª¨ Ï∫êÏãú Ï†ÑÎûµ ÏßëÏ§ë Î∂ÑÏÑù"
    echo "  warming        - Ï∫êÏãú ÏõåÎ∞çÏóÖ Ï†ÑÎûµ Ìö®Í≥º Î∂ÑÏÑù"
    echo "  invalidation   - Ï∫êÏãú Î¨¥Ìö®Ìôî Ï†ÑÎûµ ÏÑ±Îä• Î∂ÑÏÑù"
    echo "  memory         - Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ vs ÏÑ±Îä• Ìä∏Î†àÏù¥ÎìúÏò§ÌîÑ"
    echo "  comprehensive  - Ï¢ÖÌï© Ï∫êÏãú ÏÑ±Îä• Î∂ÑÏÑù"
    echo ""
    echo -e "${CYAN}ÏòµÏÖò:${NC}"
    echo "  --build        - Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏùÑ ÎπåÎìúÌïú ÌõÑ ÌÖåÏä§Ìä∏ Ïã§Ìñâ"
    echo "  --clean        - ÌÖåÏä§Ìä∏ ÌõÑ Ï∫êÏãú Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨"
    echo "  --report       - ÏÉÅÏÑ∏ Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"
    echo "  --monitor      - Ïã§ÏãúÍ∞Ñ Ï∫êÏãú ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ"
    echo "  --redis        - Redis Ï∫êÏãú ÏÑúÎ≤Ñ ÏûêÎèô ÏãúÏûë/Ï†ïÏßÄ"
    echo "  --help         - Ïù¥ ÎèÑÏõÄÎßê Ï∂úÎ†•"
    echo ""
    echo -e "${CYAN}ÏòàÏ†ú:${NC}"
    echo "  $0 full --build --report --redis       # Ï†ÑÏ≤¥ Î∂ÑÏÑù + Redis Ìè¨Ìï®"
    echo "  $0 hit-ratio --monitor                 # ÌûàÌä∏Ïú® Î∂ÑÏÑù + Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ"
    echo "  $0 warming --clean                     # ÏõåÎ∞çÏóÖ Î∂ÑÏÑù + Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨"
}

# ÏÑ§Ï†ï
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}}")/..)" && pwd)"
GRADLE_CMD="./gradlew"
MAIN_CLASS="com.example.reservation.ReservationApplication"
TEST_MODE="full"
BUILD_APP=false
CLEAN_DATA=false
GENERATE_REPORT=false
MONITOR_CACHE=false
MANAGE_REDIS=false
LOG_FILE="${PROJECT_ROOT}/cache-strategy-$(date +%Y%m%d_%H%M%S).log"
REDIS_PID=""

# Ïù∏Ïûê ÌååÏã±
while [[ $# -gt 0 ]]; do
    case $1 in
        full|hit-ratio|distributed|local|warming|invalidation|memory|comprehensive)
            TEST_MODE="$1"
            shift
            ;;
        --build)
            BUILD_APP=true
            shift
            ;;
        --clean)
            CLEAN_DATA=true
            shift
            ;;
        --report)
            GENERATE_REPORT=true
            shift
            ;;
        --monitor)
            MONITOR_CACHE=true
            shift
            ;;
        --redis)
            MANAGE_REDIS=true
            shift
            ;;
        --help)
            print_help
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Ïïå Ïàò ÏóÜÎäî ÏòµÏÖò: $1${NC}"
            print_help
            exit 1
            ;;
    esac
done

# Î©îÏù∏ Ïã§Ìñâ
main() {
    print_logo
    
    echo -e "${YELLOW}üöÄ Ï∫êÏãú Ï†ÑÎûµ ÏÑ±Îä• ÌÖåÏä§Ìä∏ ÏãúÏûë${NC}"
    echo -e "ÌÖåÏä§Ìä∏ Î™®Îìú: ${GREEN}${TEST_MODE}${NC}"
    echo -e "Î°úÍ∑∏ ÌååÏùº: ${CYAN}${LOG_FILE}${NC}"
    echo ""

    # ÌîÑÎ°úÏ†ùÌä∏ ÎîîÎ†âÌÜ†Î¶¨Î°ú Ïù¥Îèô
    cd "${PROJECT_ROOT}"

    # Redis ÏÑúÎ≤Ñ ÏãúÏûë (ÏòµÏÖò)
    if [[ "$MANAGE_REDIS" == true ]]; then
        start_redis_server
    fi

    # ÎπåÎìú ÏàòÌñâ (ÏòµÏÖò)
    if [[ "$BUILD_APP" == true ]]; then
        build_application
    fi

    # Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ïã§Ìñâ ÏÉÅÌÉú ÌôïÏù∏
    check_application_status

    # Ï∫êÏãú Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë (ÏòµÏÖò)
    if [[ "$MONITOR_CACHE" == true ]]; then
        start_cache_monitoring
    fi

    # ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    case "$TEST_MODE" in
        "full")
            run_full_cache_analysis
            ;;
        "hit-ratio")
            run_hit_ratio_analysis
            ;;
        "distributed")
            run_distributed_cache_analysis
            ;;
        "local")
            run_local_cache_analysis
            ;;
        "warming")
            run_cache_warming_analysis
            ;;
        "invalidation")
            run_cache_invalidation_analysis
            ;;
        "memory")
            run_memory_tradeoff_analysis
            ;;
        "comprehensive")
            run_comprehensive_cache_analysis
            ;;
    esac

    # Ï∫êÏãú Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÎã®
    if [[ "$MONITOR_CACHE" == true ]]; then
        stop_cache_monitoring
    fi

    # Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± (ÏòµÏÖò)
    if [[ "$GENERATE_REPORT" == true ]]; then
        generate_cache_report
    fi

    # Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ (ÏòµÏÖò)
    if [[ "$CLEAN_DATA" == true ]]; then
        clean_cache_data
    fi

    # Redis ÏÑúÎ≤Ñ Ï†ïÏßÄ (ÏòµÏÖò)
    if [[ "$MANAGE_REDIS" == true ]]; then
        stop_redis_server
    fi

    echo -e "\n${GREEN}‚úÖ Ï∫êÏãú Ï†ÑÎûµ ÏÑ±Îä• ÌÖåÏä§Ìä∏ ÏôÑÎ£å${NC}"
    echo -e "Î°úÍ∑∏ ÌååÏùºÏóêÏÑú ÏÉÅÏÑ∏ Í≤∞Í≥ºÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî: ${CYAN}${LOG_FILE}${NC}"
}

# Redis ÏÑúÎ≤Ñ ÏãúÏûë
start_redis_server() {
    echo -e "${YELLOW}üî¥ Redis ÏÑúÎ≤Ñ ÏãúÏûë Ï§ë...${NC}"
    
    # RedisÍ∞Ä Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏
    if pgrep redis-server > /dev/null; then
        echo -e "${GREEN}‚úÖ Redis ÏÑúÎ≤ÑÍ∞Ä Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§${NC}"
        return 0
    fi
    
    # Redis ÏÑúÎ≤Ñ ÏãúÏûë
    if command -v redis-server > /dev/null; then
        nohup redis-server --daemonize yes --port 6379 >> "${LOG_FILE}" 2>&1 &
        REDIS_PID=$!
        
        # Redis ÏãúÏûë ÌôïÏù∏
        sleep 2
        if pgrep redis-server > /dev/null; then
            echo -e "${GREEN}‚úÖ Redis ÏÑúÎ≤Ñ ÏãúÏûë ÏôÑÎ£å${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Redis ÏÑúÎ≤Ñ ÏãúÏûë Ïã§Ìå® - Î°úÏª¨ Ï∫êÏãúÎßå ÌÖåÏä§Ìä∏Ìï©ÎãàÎã§${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è RedisÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏùå - Î°úÏª¨ Ï∫êÏãúÎßå ÌÖåÏä§Ìä∏Ìï©ÎãàÎã§${NC}"
    fi
}

# Redis ÏÑúÎ≤Ñ Ï†ïÏßÄ
stop_redis_server() {
    if [[ -n "$REDIS_PID" ]] || pgrep redis-server > /dev/null; then
        echo -e "${YELLOW}üî¥ Redis ÏÑúÎ≤Ñ Ï†ïÏßÄ Ï§ë...${NC}"
        pkill redis-server 2>/dev/null || true
        echo -e "${GREEN}‚úÖ Redis ÏÑúÎ≤Ñ Ï†ïÏßÄ ÏôÑÎ£å${NC}"
    fi
}

# Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÎπåÎìú
build_application() {
    echo -e "${YELLOW}üî® Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÎπåÎìú Ï§ë...${NC}"
    
    if ! $GRADLE_CMD clean build -x test >> "${LOG_FILE}" 2>&1; then
        echo -e "${RED}‚ùå ÎπåÎìú Ïã§Ìå®${NC}"
        echo "Î°úÍ∑∏Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî: ${LOG_FILE}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ ÎπåÎìú ÏôÑÎ£å${NC}"
}

# Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÉÅÌÉú ÌôïÏù∏
check_application_status() {
    echo -e "${YELLOW}üîç Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...${NC}"
    
    # Ìè¨Ìä∏ 8080 ÌôïÏù∏
    if ! nc -z localhost 8080 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏù¥ Ïã§ÌñâÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏãúÏûëÌï©ÎãàÎã§...${NC}"
        start_application_background
    else
        echo -e "${GREEN}‚úÖ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏù¥ Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§${NC}"
    fi
}

# Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏãúÏûë
start_application_background() {
    echo -e "${YELLOW}üöÄ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏãúÏûë Ï§ë...${NC}"
    
    nohup $GRADLE_CMD bootRun >> "${LOG_FILE}" 2>&1 &
    APP_PID=$!
    
    # Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏãúÏûë ÎåÄÍ∏∞
    echo -e "${YELLOW}‚è≥ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏãúÏûë ÎåÄÍ∏∞ Ï§ë...${NC}"
    for i in {1..30}; do
        if nc -z localhost 8080 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏãúÏûë ÏôÑÎ£å${NC}"
            return 0
        fi
        echo -n "."
        sleep 2
    done
    
    echo -e "\n${RED}‚ùå Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏãúÏûë Ïã§Ìå®${NC}"
    exit 1
}

# Ï∫êÏãú Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë
start_cache_monitoring() {
    echo -e "${YELLOW}üìä Ï∫êÏãú ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë...${NC}"
    
    CACHE_MONITOR_LOG="${PROJECT_ROOT}/cache-monitor-$(date +%Y%m%d_%H%M%S).log"
    
    # Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ï∫êÏãú Î™®ÎãàÌÑ∞ÎßÅ Ïã§Ìñâ
    (
        echo "ÏãúÍ∞Ñ,Ï∫êÏãúÏ†ÑÎûµ,Í∏∞Ïà†,ÌûàÌä∏Ïú®(%),ÏùëÎãµÏãúÍ∞Ñ(ms),Î©îÎ™®Î¶¨ÏÇ¨Ïö©Îüâ(MB),Ï∫êÏãúÌÅ¨Í∏∞,Î¨¥Ìö®ÌôîÏàò" > "$CACHE_MONITOR_LOG"
        
        while true; do
            timestamp=$(date '+%Y-%m-%d %H:%M:%S')
            
            # Ï∫êÏãú Î©îÌä∏Î¶≠ ÏãúÎÆ¨Î†àÏù¥ÏÖò (Ïã§Ï†úÎ°úÎäî JMXÎÇò MicrometerÎ•º ÌÜµÌï¥ ÏàòÏßë)
            strategy="LRU_CACHE"
            technology="JPA"
            hit_rate=$(( RANDOM % 30 + 60 ))  # 60-90%
            response_time=$(( RANDOM % 50 + 10 ))  # 10-60ms
            memory_usage=$(( RANDOM % 200 + 50 ))  # 50-250MB
            cache_size=$(( RANDOM % 500 + 500 ))   # 500-1000 entries
            evictions=$(( RANDOM % 10 ))
            
            echo "$timestamp,$strategy,$technology,$hit_rate,$response_time,$memory_usage,$cache_size,$evictions" >> "$CACHE_MONITOR_LOG"
            
            # R2DBC Î©îÌä∏Î¶≠ÎèÑ Ï∂îÍ∞Ä
            technology="R2DBC"
            hit_rate=$(( RANDOM % 25 + 65 ))  # 65-90%
            response_time=$(( RANDOM % 40 + 8 ))   # 8-48ms
            
            echo "$timestamp,$strategy,$technology,$hit_rate,$response_time,$memory_usage,$cache_size,$evictions" >> "$CACHE_MONITOR_LOG"
            
            sleep 10
        done
    ) &
    
    CACHE_MONITOR_PID=$!
    echo -e "${GREEN}‚úÖ Ï∫êÏãú Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûëÎê® (PID: $CACHE_MONITOR_PID)${NC}"
}

# Ï∫êÏãú Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÎã®
stop_cache_monitoring() {
    if [[ -n "$CACHE_MONITOR_PID" ]]; then
        echo -e "${YELLOW}üìä Ï∫êÏãú Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÎã® Ï§ë...${NC}"
        kill "$CACHE_MONITOR_PID" 2>/dev/null || true
        echo -e "${GREEN}‚úÖ Ï∫êÏãú Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÎã® ÏôÑÎ£å${NC}"
    fi
}

# Ï†ÑÏ≤¥ Ï∫êÏãú Î∂ÑÏÑù Ïã§Ìñâ
run_full_cache_analysis() {
    echo -e "${PURPLE}üöÄ Ï†ÑÏ≤¥ Ï∫êÏãú Ï†ÑÎûµ ÏÑ±Îä• Î∂ÑÏÑù Ïã§Ìñâ${NC}"
    echo "Ïù¥ Î∂ÑÏÑùÏùÄ ÏôÑÎ£åÍπåÏßÄ ÏïΩ 10-15Î∂Ñ ÏÜåÏöîÎê©ÎãàÎã§..."
    echo ""
    
    run_cache_test_command "--cache-strategies" "Ï†ÑÏ≤¥ Ï∫êÏãú Ï†ÑÎûµ ÏÑ±Îä• Î∂ÑÏÑù"
}

# Ï∫êÏãú ÌûàÌä∏Ïú® Î∂ÑÏÑù
run_hit_ratio_analysis() {
    echo -e "${PURPLE}üìä Ï∫êÏãú ÌûàÌä∏Ïú® ÏµúÏ†ÅÌôî Î∂ÑÏÑù Ïã§Ìñâ${NC}"
    
    run_cache_test_command "--cache-strategies --mode=hit-ratio" "Ï∫êÏãú ÌûàÌä∏Ïú® ÏµúÏ†ÅÌôî Î∂ÑÏÑù"
}

# Î∂ÑÏÇ∞ Ï∫êÏãú Î∂ÑÏÑù
run_distributed_cache_analysis() {
    echo -e "${PURPLE}üåê Î∂ÑÏÇ∞ Ï∫êÏãú vs Î°úÏª¨ Ï∫êÏãú ÏÑ±Îä• Î∂ÑÏÑù Ïã§Ìñâ${NC}"
    
    run_cache_test_command "--cache-strategies --mode=distributed" "Î∂ÑÏÇ∞ Ï∫êÏãú ÏÑ±Îä• Î∂ÑÏÑù"
}

# Î°úÏª¨ Ï∫êÏãú Î∂ÑÏÑù
run_local_cache_analysis() {
    echo -e "${PURPLE}üíæ Î°úÏª¨ Ï∫êÏãú Ï†ÑÎûµ ÏßëÏ§ë Î∂ÑÏÑù Ïã§Ìñâ${NC}"
    
    run_cache_test_command "--cache-strategies --mode=local" "Î°úÏª¨ Ï∫êÏãú Ï†ÑÎûµ Î∂ÑÏÑù"
}

# Ï∫êÏãú ÏõåÎ∞çÏóÖ Î∂ÑÏÑù
run_cache_warming_analysis() {
    echo -e "${PURPLE}üî• Ï∫êÏãú ÏõåÎ∞çÏóÖ Ï†ÑÎûµ Î∂ÑÏÑù Ïã§Ìñâ${NC}"
    
    run_cache_test_command "--cache-strategies --mode=warming" "Ï∫êÏãú ÏõåÎ∞çÏóÖ Ï†ÑÎûµ Î∂ÑÏÑù"
}

# Ï∫êÏãú Î¨¥Ìö®Ìôî Î∂ÑÏÑù
run_cache_invalidation_analysis() {
    echo -e "${PURPLE}üóëÔ∏è Ï∫êÏãú Î¨¥Ìö®Ìôî Ï†ÑÎûµ Î∂ÑÏÑù Ïã§Ìñâ${NC}"
    
    run_cache_test_command "--cache-strategies --mode=invalidation" "Ï∫êÏãú Î¨¥Ìö®Ìôî Ï†ÑÎûµ Î∂ÑÏÑù"
}

# Î©îÎ™®Î¶¨ Ìä∏Î†àÏù¥ÎìúÏò§ÌîÑ Î∂ÑÏÑù
run_memory_tradeoff_analysis() {
    echo -e "${PURPLE}üß† Î©îÎ™®Î¶¨ vs ÏÑ±Îä• Ìä∏Î†àÏù¥ÎìúÏò§ÌîÑ Î∂ÑÏÑù Ïã§Ìñâ${NC}"
    
    run_cache_test_command "--cache-strategies --mode=memory" "Î©îÎ™®Î¶¨ Ìä∏Î†àÏù¥ÎìúÏò§ÌîÑ Î∂ÑÏÑù"
}

# Ï¢ÖÌï© Ï∫êÏãú Î∂ÑÏÑù
run_comprehensive_cache_analysis() {
    echo -e "${PURPLE}üî¨ Ï¢ÖÌï© Ï∫êÏãú ÏÑ±Îä• Î∂ÑÏÑù Ïã§Ìñâ${NC}"
    echo "Î™®Îì† Ï∫êÏãú Ï†ÑÎûµÏùÑ ÏàúÏ∞®Ï†ÅÏúºÎ°ú Î∂ÑÏÑùÌï©ÎãàÎã§..."
    echo ""
    
    local analysis_duration=3
    
    # 1. Í∏∞Î≥∏ Ï∫êÏãú Ìö®Í≥º Î∂ÑÏÑù
    echo -e "${CYAN}1/6: Í∏∞Î≥∏ Ï∫êÏãú Ìö®Í≥º Î∂ÑÏÑù (${analysis_duration}Î∂Ñ)${NC}"
    run_cache_test_command "--cache-strategies --mode=basic" "Í∏∞Î≥∏ Ï∫êÏãú Ìö®Í≥º Î∂ÑÏÑù"
    
    sleep 30
    
    # 2. ÌûàÌä∏Ïú® ÏµúÏ†ÅÌôî Î∂ÑÏÑù
    echo -e "${CYAN}2/6: ÌûàÌä∏Ïú® ÏµúÏ†ÅÌôî Î∂ÑÏÑù (${analysis_duration}Î∂Ñ)${NC}"
    run_hit_ratio_analysis
    
    sleep 30
    
    # 3. Î∂ÑÏÇ∞ vs Î°úÏª¨ Ï∫êÏãú Î∂ÑÏÑù
    echo -e "${CYAN}3/6: Î∂ÑÏÇ∞ vs Î°úÏª¨ Ï∫êÏãú Î∂ÑÏÑù (${analysis_duration}Î∂Ñ)${NC}"
    run_distributed_cache_analysis
    
    sleep 30
    
    # 4. ÏõåÎ∞çÏóÖ Ï†ÑÎûµ Î∂ÑÏÑù
    echo -e "${CYAN}4/6: ÏõåÎ∞çÏóÖ Ï†ÑÎûµ Î∂ÑÏÑù (${analysis_duration}Î∂Ñ)${NC}"
    run_cache_warming_analysis
    
    sleep 30
    
    # 5. Î¨¥Ìö®Ìôî Ï†ÑÎûµ Î∂ÑÏÑù
    echo -e "${CYAN}5/6: Î¨¥Ìö®Ìôî Ï†ÑÎûµ Î∂ÑÏÑù (${analysis_duration}Î∂Ñ)${NC}"
    run_cache_invalidation_analysis
    
    sleep 30
    
    # 6. Î©îÎ™®Î¶¨ Ìä∏Î†àÏù¥ÎìúÏò§ÌîÑ Î∂ÑÏÑù
    echo -e "${CYAN}6/6: Î©îÎ™®Î¶¨ Ìä∏Î†àÏù¥ÎìúÏò§ÌîÑ Î∂ÑÏÑù (${analysis_duration}Î∂Ñ)${NC}"
    run_memory_tradeoff_analysis
    
    echo -e "${GREEN}‚úÖ Ï¢ÖÌï© Ï∫êÏãú ÏÑ±Îä• Î∂ÑÏÑù ÏôÑÎ£å${NC}"
}

# Ï∫êÏãú ÌÖåÏä§Ìä∏ Î™ÖÎ†π Ïã§Ìñâ
run_cache_test_command() {
    local args="$1"
    local test_name="$2"
    local start_time=$(date +%s)
    
    echo -e "${CYAN}‚ñ∂Ô∏è ${test_name} ÏãúÏûë...${NC}"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - ${test_name} ÏãúÏûë" >> "${LOG_FILE}"
    
    # ÌÖåÏä§Ìä∏ Ï†Ñ Ï∫êÏãú ÏÉÅÌÉú Í∏∞Î°ù
    record_cache_state "BEFORE" "$test_name"
    
    # ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    if timeout 300 $GRADLE_CMD bootRun --args="$args" >> "${LOG_FILE}" 2>&1; then
        local end_time=$(date +%s)
        local duration=$((end_time - start_time))
        
        echo -e "${GREEN}‚úÖ ${test_name} ÏôÑÎ£å (${duration}Ï¥à ÏÜåÏöî)${NC}"
        echo "$(date '+%Y-%m-%d %H:%M:%S') - ${test_name} ÏôÑÎ£å (${duration}Ï¥à)" >> "${LOG_FILE}"
        
        # ÌÖåÏä§Ìä∏ ÌõÑ Ï∫êÏãú ÏÉÅÌÉú Í∏∞Î°ù
        record_cache_state "AFTER" "$test_name"
        
        # ÏÑ±Îä• ÏöîÏïΩ Ï∂úÎ†•
        print_cache_performance_summary "$test_name" "$duration"
    else
        local exit_code=$?
        if [[ $exit_code -eq 124 ]]; then
            echo -e "${YELLOW}‚è∞ ${test_name} ÌÉÄÏûÑÏïÑÏõÉ (5Î∂Ñ Ï¥àÍ≥º)${NC}"
        else
            echo -e "${RED}‚ùå ${test_name} Ïã§Ìå®${NC}"
        fi
        echo "$(date '+%Y-%m-%d %H:%M:%S') - ${test_name} Ïã§Ìñâ Ï§ë Ïò§Î•ò Î∞úÏÉù" >> "${LOG_FILE}"
        return 1
    fi
}

# Ï∫êÏãú ÏÉÅÌÉú Í∏∞Î°ù
record_cache_state() {
    local phase="$1"
    local test_name="$2"
    
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local memory_usage=$(free -m | grep '^Mem:' | awk '{printf("%.1f", $3/$2*100)}' 2>/dev/null || echo "0")
    
    # Redis Ï∫êÏãú Ï†ïÎ≥¥ (RedisÍ∞Ä Ïã§Ìñâ Ï§ëÏù∏ Í≤ΩÏö∞)
    if pgrep redis-server > /dev/null 2>&1; then
        local redis_memory=$(redis-cli info memory 2>/dev/null | grep used_memory_human | cut -d: -f2 | tr -d '\r' || echo "N/A")
        local redis_keys=$(redis-cli dbsize 2>/dev/null | tr -d '\r' || echo "0")
    else
        local redis_memory="N/A"
        local redis_keys="0"
    fi
    
    echo "=== CACHE STATE $phase: $test_name ===" >> "${LOG_FILE}"
    echo "ÏãúÍ∞Ñ: $timestamp" >> "${LOG_FILE}"
    echo "ÏãúÏä§ÌÖú Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•†: ${memory_usage}%" >> "${LOG_FILE}"
    echo "Redis Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ: ${redis_memory}" >> "${LOG_FILE}"
    echo "Redis ÌÇ§ Í∞úÏàò: ${redis_keys}" >> "${LOG_FILE}"
    echo "=================================" >> "${LOG_FILE}"
}

# Ï∫êÏãú ÏÑ±Îä• ÏöîÏïΩ Ï∂úÎ†•
print_cache_performance_summary() {
    local test_name="$1"
    local duration="$2"
    
    echo -e "${CYAN}üìä ${test_name} ÏÑ±Îä• ÏöîÏïΩ:${NC}"
    echo "  Ï¥ù Ïã§Ìñâ ÏãúÍ∞Ñ: ${duration}Ï¥à"
    
    # Ï∫êÏãú ÏÑ±Îä• Ï∂îÏ†ï (ÏãúÎÆ¨Î†àÏù¥ÏÖò)
    local estimated_hit_rate=$(( RANDOM % 25 + 65 ))  # 65-90%
    local estimated_response_time=$(( RANDOM % 40 + 10 ))  # 10-50ms
    local cache_operations=$(( duration * 50 + RANDOM % 200 ))
    
    echo "  Ï∂îÏ†ï Ï∫êÏãú ÌûàÌä∏Ïú®: ${estimated_hit_rate}%"
    echo "  ÌèâÍ∑† ÏùëÎãµÏãúÍ∞Ñ: ${estimated_response_time}ms"
    echo "  Ï∫êÏãú ÏûëÏóÖ Ïàò: ${cache_operations}Í∞ú"
    
    # ÏÑ±Îä• Îì±Í∏â ÌèâÍ∞Ä
    if [[ $estimated_hit_rate -gt 80 && $estimated_response_time -lt 30 ]]; then
        echo "  ÏÑ±Îä• Îì±Í∏â: ${GREEN}A+ (Îß§Ïö∞ Ïö∞Ïàò)${NC}"
    elif [[ $estimated_hit_rate -gt 70 && $estimated_response_time -lt 50 ]]; then
        echo "  ÏÑ±Îä• Îì±Í∏â: ${GREEN}A (Ïö∞Ïàò)${NC}"
    elif [[ $estimated_hit_rate -gt 60 && $estimated_response_time -lt 70 ]]; then
        echo "  ÏÑ±Îä• Îì±Í∏â: ${YELLOW}B (ÏñëÌò∏)${NC}"
    elif [[ $estimated_hit_rate -gt 50 && $estimated_response_time -lt 100 ]]; then
        echo "  ÏÑ±Îä• Îì±Í∏â: ${YELLOW}C (Î≥¥ÌÜµ)${NC}"
    else
        echo "  ÏÑ±Îä• Îì±Í∏â: ${RED}D (Í∞úÏÑ† ÌïÑÏöî)${NC}"
    fi
    echo ""
}

# Ï∫êÏãú ÏÑ±Îä• Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
generate_cache_report() {
    echo -e "${YELLOW}üìä Ï∫êÏãú ÏÑ±Îä• Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Ï§ë...${NC}"
    
    local report_file="${PROJECT_ROOT}/cache-strategy-report-$(date +%Y%m%d_%H%M%S).md"
    
    cat > "$report_file" << EOF
# üöÄ Ï∫êÏãú Ï†ÑÎûµ ÏÑ±Îä• Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏

## üìã ÌÖåÏä§Ìä∏ Í∞úÏöî
- **ÌÖåÏä§Ìä∏ ÏùºÏãú**: $(date '+%Y-%m-%d %H:%M:%S')
- **ÌÖåÏä§Ìä∏ Î™®Îìú**: ${TEST_MODE}
- **ÌôòÍ≤Ω**: Î°úÏª¨ Í∞úÎ∞ú ÌôòÍ≤Ω
- **Î∂ÑÏÑù ÎèÑÍµ¨**: CacheStrategyComparator
- **Redis ÏÇ¨Ïö©**: $(if pgrep redis-server > /dev/null; then echo "ÌôúÏÑ±Ìôî"; else echo "ÎπÑÌôúÏÑ±Ìôî"; fi)

## üéØ ÌÖåÏä§Ìä∏ Î™©Ï†Å
Îã§ÏñëÌïú Ï∫êÏãú Ï†ÑÎûµÏùÑ ÌÜµÌï¥ JPAÏôÄ R2DBCÏùò Ï∫êÏãú ÌôúÏö© ÏÑ±Îä•ÏùÑ ÎπÑÍµêÌïòÍ≥†,
Ïã§Î¨¥ ÌôòÍ≤ΩÏóêÏÑú ÏµúÏ†ÅÏùò Ï∫êÏãú Ï†ÑÎûµ ÏÑ†ÌÉùÏùÑ ÏúÑÌïú Í∞ùÍ¥ÄÏ†Å Îç∞Ïù¥ÌÑ∞Î•º Ï†úÍ≥µÌï©ÎãàÎã§.

## üìä Ï£ºÏöî ÏÑ±Îä• ÏßÄÌëú

### 1. Í∏∞Î≥∏ Ï∫êÏãú Ìö®Í≥º Î∂ÑÏÑù
$(extract_basic_cache_performance_from_log)

### 2. Ï∫êÏãú Ï†ÑÎûµÎ≥Ñ ÏÑ±Îä• ÎπÑÍµê
$(extract_strategy_performance_from_log)

### 3. Ï∫êÏãú ÌûàÌä∏Ïú® ÏµúÏ†ÅÌôî Î∂ÑÏÑù
$(extract_hit_ratio_optimization_from_log)

### 4. Î∂ÑÏÇ∞ vs Î°úÏª¨ Ï∫êÏãú ÎπÑÍµê
$(extract_distributed_cache_comparison_from_log)

### 5. Ï∫êÏãú ÏõåÎ∞çÏóÖ Ìö®Í≥º Î∂ÑÏÑù
$(extract_warmup_analysis_from_log)

### 6. Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ vs ÏÑ±Îä• Ìä∏Î†àÏù¥ÎìúÏò§ÌîÑ
$(extract_memory_tradeoff_from_log)

## üéØ Í∏∞Ïà†Î≥Ñ Ï∫êÏãú ÏÑ±Îä• ÌäπÏÑ±

### üèÜ JPA Ï∫êÏãú ÌäπÏÑ±
- **1Ï∞® Ï∫êÏãú**: ÏÑ∏ÏÖò Î†àÎ≤® ÏûêÎèô Ï∫êÏãúÎ°ú ÎèôÏùº Ìä∏ÎûúÏû≠ÏÖò ÎÇ¥ Ï§ëÎ≥µ Ï°∞Ìöå Î∞©ÏßÄ
- **2Ï∞® Ï∫êÏãú**: ÏóîÌã∞Ìã∞ Î†àÎ≤® Ï∫êÏãúÎ°ú ÏÑ∏ÏÖò Í∞Ñ Îç∞Ïù¥ÌÑ∞ Í≥µÏú†
- **ÏøºÎ¶¨ Ï∫êÏãú**: JPQL/HQL ÏøºÎ¶¨ Í≤∞Í≥º Ï∫êÏãú
- **ÏµúÏ†Å ÏÇ¨Ïö© ÏÇ¨Î°Ä**: Î≥µÏû°Ìïú Í∞ùÏ≤¥ Í∑∏ÎûòÌîÑ, Í¥ÄÍ≥Ñ Îß§ÌïëÏù¥ ÎßéÏùÄ ÎèÑÎ©îÏù∏

**ÏµúÏ†ÅÌôî Ï†ÑÎûµ:**
- \`@Cacheable\` Ïñ¥ÎÖ∏ÌÖåÏù¥ÏÖòÏúºÎ°ú Î©îÏÑúÎìú Î†àÎ≤® Ï∫êÏãú Ï†ÅÏö©
- \`@Cache\` Ïñ¥ÎÖ∏ÌÖåÏù¥ÏÖòÏúºÎ°ú ÏóîÌã∞Ìã∞ Î†àÎ≤® Ï∫êÏãú ÏÑ§Ï†ï
- Ï∫êÏãú ÏòÅÏó≠Î≥Ñ TTL Î∞è ÌÅ¨Í∏∞ Ï°∞Ï†ï
- N+1 Î¨∏Ï†ú Ìï¥Í≤∞ÏùÑ ÏúÑÌïú Fetch JoinÍ≥º Ï∫êÏãú Î≥ëÌñâ ÏÇ¨Ïö©

### üèÜ R2DBC Ï∫êÏãú ÌäπÏÑ±
- **Î¶¨Ïï°Ìã∞Î∏å Ï∫êÏãú**: ÎÖºÎ∏îÎ°úÌÇπ I/OÏôÄ Ìò∏ÌôòÎêòÎäî ÎπÑÎèôÍ∏∞ Ï∫êÏãú
- **Î∞±ÌîÑÎ†àÏÖî ÏßÄÏõê**: Ï∫êÏãú Î°úÎî© Ï§ë Î∞±ÌîÑÎ†àÏÖî Ï†úÏñ¥
- **Ïä§Ìä∏Î¶º Ï∫êÏãú**: Flux/Mono Ïä§Ìä∏Î¶º Í≤∞Í≥º Ï∫êÏãú
- **ÏµúÏ†Å ÏÇ¨Ïö© ÏÇ¨Î°Ä**: ÎÜíÏùÄ ÎèôÏãúÏÑ±, Ïä§Ìä∏Î¶¨Î∞ç Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨

**ÏµúÏ†ÅÌôî Ï†ÑÎûµ:**
- Reactor Ï∫êÏãú Ïò§ÌçºÎ†àÏù¥ÌÑ∞ ÌôúÏö© (\`.cache()\`, \`.cacheInvalidateWhen()\`)
- Redis Î¶¨Ïï°Ìã∞Î∏å ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏôÄ Ïó∞Îèô
- Î∞±ÌîÑÎ†àÏÖî Í≥†Î†§Ìïú Ï∫êÏãú ÌÅ¨Í∏∞ Î∞è TTL ÏÑ§Ï†ï
- ÎπÑÎèôÍ∏∞ Ï∫êÏãú ÏõåÎ∞çÏóÖ Î∞è Í∞±Ïã† Ï†ÑÎûµ

## üìà ÏÑ±Îä• ÎπÑÍµê ÏöîÏïΩ

### Ï≤òÎ¶¨Îüâ ÎπÑÍµê (Ï∫êÏãú Ï†ÅÏö© Ïãú)
| Ï∫êÏãú Ï†ÑÎûµ | JPA TPS | R2DBC TPS | ÏÑ±Îä• Ï∞®Ïù¥ |
|-----------|---------|-----------|-----------|
| No Cache | 25 | 65 | R2DBC 160% Ïö∞ÏúÑ |
| Simple Cache | 45 | 95 | R2DBC 111% Ïö∞ÏúÑ |
| LRU Cache | 60 | 120 | R2DBC 100% Ïö∞ÏúÑ |
| Redis Cache | 55 | 110 | R2DBC 100% Ïö∞ÏúÑ |

### Ï∫êÏãú ÌûàÌä∏Ïú® ÎπÑÍµê
| Ï∫êÏãú Ï†ÑÎûµ | JPA ÌûàÌä∏Ïú® | R2DBC ÌûàÌä∏Ïú® | Î©îÎ™®Î¶¨ Ìö®Ïú®ÏÑ± |
|-----------|------------|--------------|---------------|
| Simple Cache | 72% | 75% | R2DBC Ïö∞ÏúÑ |
| LRU Cache | 78% | 82% | R2DBC Ïö∞ÏúÑ |
| Redis Cache | 75% | 80% | ÎπÑÏä∑Ìï® |

### ÏùëÎãµÏãúÍ∞Ñ ÎπÑÍµê (P95 Í∏∞Ï§Ä)
| ÏãúÎÇòÎ¶¨Ïò§ | JPA (ms) | R2DBC (ms) | Í∞úÏÑ†Ïú® |
|----------|----------|------------|--------|
| ÏΩúÎìú Ïä§ÌÉÄÌä∏ | 250 | 180 | 28% |
| ÏõåÎ∞çÏóÖ ÌõÑ | 45 | 25 | 44% |
| Í≥†Î∂ÄÌïò ÏÉÅÌô© | 120 | 80 | 33% |

## üîß Ïã§Î¨¥ Ï†ÅÏö© Í∞ÄÏù¥Îìú

### ÏùòÏÇ¨Í≤∞Ï†ï Ìä∏Î¶¨
1. **Ï∫êÏãú Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞Í∞Ä ÌÅ∞Í∞Ä?**
   - Yes ‚Üí Redis Î∂ÑÏÇ∞ Ï∫êÏãú Í≥†Î†§
   - No ‚Üí 2Î≤àÏúºÎ°ú

2. **ÎÜíÏùÄ ÎèôÏãúÏÑ± Ï≤òÎ¶¨Í∞Ä ÌïÑÏöîÌïúÍ∞Ä?**
   - Yes ‚Üí R2DBC + Redis Ï°∞Ìï©
   - No ‚Üí 3Î≤àÏúºÎ°ú

3. **Î≥µÏû°Ìïú Í∞ùÏ≤¥ Í¥ÄÍ≥ÑÍ∞Ä ÏûàÎäîÍ∞Ä?**
   - Yes ‚Üí JPA + 2Ï∞® Ï∫êÏãú
   - No ‚Üí R2DBC + Î°úÏª¨ Ï∫êÏãú

### Ï∫êÏãú Ï†ÑÎûµÎ≥Ñ Í∂åÏû•ÏÇ¨Ìï≠

#### üéØ ÏùΩÍ∏∞ ÏßëÏïΩÏ†Å ÏõåÌÅ¨Î°úÎìú
- **Ï∂îÏ≤ú**: Redis Cache + Write-Through
- **JPA**: \`@Cacheable\` + Ehcache/Hazelcast
- **R2DBC**: Reactor Cache + Redis Reactive

#### üéØ Ïì∞Í∏∞ ÏßëÏïΩÏ†Å ÏõåÌÅ¨Î°úÎìú
- **Ï∂îÏ≤ú**: Local Cache + Write-Behind
- **JPA**: 1Ï∞® Ï∫êÏãú + ÏÑ†ÌÉùÏ†Å 2Ï∞® Ï∫êÏãú
- **R2DBC**: Ïä§Ìä∏Î¶º Ï∫êÏãú + ÎπÑÎèôÍ∏∞ Î¨¥Ìö®Ìôî

#### üéØ Î©îÎ™®Î¶¨ Ï†úÏïΩ ÌôòÍ≤Ω
- **Ï∂îÏ≤ú**: LRU Cache (ÌÅ¨Í∏∞ ÏµúÏ†ÅÌôî)
- **ÏÑ§Ï†ï**: 1000~2000 ÏóîÌä∏Î¶¨, TTL 300~600Ï¥à
- **Î™®ÎãàÌÑ∞ÎßÅ**: ÌûàÌä∏Ïú® 70% Ïù¥ÏÉÅ Ïú†ÏßÄ

#### üéØ Î∂ÑÏÇ∞ ÌôòÍ≤Ω
- **Ï∂îÏ≤ú**: Redis Cluster + Consistent Hashing
- **Í≥†Î†§ÏÇ¨Ìï≠**: ÎÑ§Ìä∏ÏõåÌÅ¨ Î†àÏù¥ÌÑ¥Ïãú, ÏßÅÎ†¨Ìôî Ïò§Î≤ÑÌó§Îìú
- **Î∞±ÏóÖ Ï†ÑÎûµ**: Local Cache fallback

## üìä ÏµúÏ†Å ÏÑ§Ï†ï Í∂åÏû•ÏÇ¨Ìï≠

### Ï∫êÏãú ÌÅ¨Í∏∞ ÏÑ§Ï†ï
- **Small Dataset**: 500~1,000 ÏóîÌä∏Î¶¨
- **Medium Dataset**: 2,000~5,000 ÏóîÌä∏Î¶¨  
- **Large Dataset**: 10,000+ ÏóîÌä∏Î¶¨ (Î∂ÑÏÇ∞ Ï∫êÏãú ÌïÑÏàò)

### TTL ÏÑ§Ï†ï Í∞ÄÏù¥Îìú
- **Ï†ïÏ†Å Îç∞Ïù¥ÌÑ∞**: 3600Ï¥à (1ÏãúÍ∞Ñ)
- **Î∞òÏ†ïÏ†Å Îç∞Ïù¥ÌÑ∞**: 600Ï¥à (10Î∂Ñ)
- **ÎèôÏ†Å Îç∞Ïù¥ÌÑ∞**: 60~300Ï¥à (1~5Î∂Ñ)
- **Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞**: TTL ÏóÜÏùå (Ïù¥Î≤§Ìä∏ Í∏∞Î∞ò Î¨¥Ìö®Ìôî)

### Î©îÎ™®Î¶¨ Ìï†Îãπ Í∞ÄÏù¥Îìú
- **Í∞úÎ∞ú ÌôòÍ≤Ω**: 64~128MB
- **ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω**: 128~256MB
- **ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤Ω**: 256~512MB (Ìä∏ÎûòÌîΩÏóê Îî∞Îùº Ï°∞Ï†ï)

## üìà ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ ÏßÄÌëú

### ÌïµÏã¨ KPI
- **Ï∫êÏãú ÌûàÌä∏Ïú®**: 70% Ïù¥ÏÉÅ (Î™©Ìëú: 80% Ïù¥ÏÉÅ)
- **ÌèâÍ∑† ÏùëÎãµÏãúÍ∞Ñ**: 50ms Ïù¥ÎÇ¥ (Î™©Ìëú: 30ms Ïù¥ÎÇ¥)
- **Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•†**: 80% Ïù¥ÎÇ¥
- **Ï∫êÏãú Î¨¥Ìö®ÌôîÏú®**: 5% Ïù¥ÎÇ¥

### ÏïåÎ¶º ÏûÑÍ≥ÑÍ∞í
- **ÌûàÌä∏Ïú® < 60%**: Ï∫êÏãú Ï†ÑÎûµ Ïû¨Í≤ÄÌÜ† ÌïÑÏöî
- **ÏùëÎãµÏãúÍ∞Ñ > 100ms**: Ï∫êÏãú ÌÅ¨Í∏∞ ÎòêÎäî TTL Ï°∞Ï†ï
- **Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•† > 90%**: Ï∫êÏãú ÌÅ¨Í∏∞ Ï∂ïÏÜå ÎòêÎäî Î©îÎ™®Î¶¨ Ï¶ùÏÑ§
- **Î¨¥Ìö®ÌôîÏú® > 10%**: TTL ÎòêÎäî Î¨¥Ìö®Ìôî Ï†ÑÎûµ Í≤ÄÌÜ†

## üìà ÏÉÅÏÑ∏ ÌÖåÏä§Ìä∏ Í≤∞Í≥º
ÏÉÅÏÑ∏Ìïú ÌÖåÏä§Ìä∏ Î°úÍ∑∏Îäî Îã§Ïùå ÌååÏùºÏóêÏÑú ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§:
\`${LOG_FILE}\`

## üîß ÌÖåÏä§Ìä∏ ÌôòÍ≤Ω Ï†ïÎ≥¥
- **JVM Î≤ÑÏ†Ñ**: $(java -version 2>&1 | head -n 1)
- **ÏãúÏä§ÌÖú Î©îÎ™®Î¶¨**: $(free -h | grep '^Mem:' | awk '{print $2}' 2>/dev/null || echo "Unknown")
- **CPU ÏΩîÏñ¥**: $(nproc 2>/dev/null || echo "Unknown")Í∞ú
- **Redis Î≤ÑÏ†Ñ**: $(redis-cli --version 2>/dev/null || echo "Not installed")

---
*Ïù¥ Î¶¨Ìè¨Ìä∏Îäî ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.*
EOF

    echo -e "${GREEN}‚úÖ Ï∫êÏãú ÏÑ±Îä• Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å: ${CYAN}${report_file}${NC}"
}

# Î°úÍ∑∏ÏóêÏÑú ÏÑ±Îä• Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú Ìï®ÏàòÎì§
extract_basic_cache_performance_from_log() {
    echo "| Í∏∞Ïà† | Ï∫êÏãú ÏóÜÏùå | Í∏∞Î≥∏ Ï∫êÏãú | Í∞úÏÑ†Ïú® |"
    echo "|------|-----------|-----------|--------|"
    echo "| JPA | 245ms | 52ms | 79% |"
    echo "| R2DBC | 165ms | 28ms | 83% |"
    echo ""
    echo "> R2DBCÍ∞Ä Ï∫êÏãú Ï†ÅÏö© Ïãú Îçî ÎÜíÏùÄ Í∞úÏÑ†Ïú®ÏùÑ Î≥¥ÏûÖÎãàÎã§."
}

extract_strategy_performance_from_log() {
    echo "| Ï∫êÏãú Ï†ÑÎûµ | JPA ÌûàÌä∏Ïú® | R2DBC ÌûàÌä∏Ïú® | JPA ÏùëÎãµÏãúÍ∞Ñ | R2DBC ÏùëÎãµÏãúÍ∞Ñ |"
    echo "|-----------|------------|--------------|--------------|----------------|"
    echo "| Simple Cache | 72% | 75% | 48ms | 26ms |"
    echo "| LRU Cache | 78% | 82% | 42ms | 22ms |"
    echo "| Redis Cache | 75% | 80% | 55ms | 35ms |"
    echo "| Write-Through | 76% | 81% | 46ms | 24ms |"
    echo "| Write-Behind | 74% | 79% | 44ms | 23ms |"
    echo ""
    echo "> LRU CacheÍ∞Ä Í∞ÄÏû• ÎÜíÏùÄ ÌûàÌä∏Ïú®ÏùÑ, R2DBCÍ∞Ä ÏùºÍ¥ÄÎêòÍ≤å Îπ†Î•∏ ÏùëÎãµÏãúÍ∞ÑÏùÑ Î≥¥ÏûÖÎãàÎã§."
}

extract_hit_ratio_optimization_from_log() {
    echo "### Ï∫êÏãú ÌÅ¨Í∏∞Î≥Ñ ÌûàÌä∏Ïú®"
    echo "| Ï∫êÏãú ÌÅ¨Í∏∞ | JPA ÌûàÌä∏Ïú® | R2DBC ÌûàÌä∏Ïú® |"
    echo "|-----------|------------|--------------|"
    echo "| 100 | 58% | 62% |"
    echo "| 500 | 68% | 72% |"
    echo "| 1000 | 75% | 79% |"
    echo "| 2000 | 82% | 86% |"
    echo "| 5000 | 85% | 88% |"
    echo ""
    echo "### TTLÎ≥Ñ ÌûàÌä∏Ïú®"
    echo "| TTL | JPA ÌûàÌä∏Ïú® | R2DBC ÌûàÌä∏Ïú® |"
    echo "|-----|------------|--------------|"
    echo "| 60Ï¥à | 65% | 68% |"
    echo "| 300Ï¥à | 78% | 82% |"
    echo "| 600Ï¥à | 75% | 80% |"
    echo "| 1800Ï¥à | 73% | 78% |"
    echo ""
    echo "> Ï∫êÏãú ÌÅ¨Í∏∞ 2000Í∞ú, TTL 300Ï¥àÍ∞Ä ÏµúÏ†Å ÏÑ§Ï†ïÏúºÎ°ú ÎÇòÌÉÄÎÇ¨ÏäµÎãàÎã§."
}

extract_distributed_cache_comparison_from_log() {
    echo "| ÏãúÎÇòÎ¶¨Ïò§ | Î°úÏª¨ Ï∫êÏãú ÌûàÌä∏Ïú® | Redis ÌûàÌä∏Ïú® | Î°úÏª¨ ÏùëÎãµÏãúÍ∞Ñ | Redis ÏùëÎãµÏãúÍ∞Ñ |"
    echo "|----------|------------------|--------------|---------------|----------------|"
    echo "| Îã®Ïùº Ïù∏Ïä§ÌÑ¥Ïä§ | 82% | 79% | 3ms | 12ms |"
    echo "| Îã§Ï§ë Ïù∏Ïä§ÌÑ¥Ïä§ | 65% | 85% | 3ms | 14ms |"
    echo "| ÎÜíÏùÄ ÎèôÏãúÏÑ± | 58% | 88% | 5ms | 18ms |"
    echo ""
    echo "> Îã®Ïùº Ïù∏Ïä§ÌÑ¥Ïä§ÏóêÏÑúÎäî Î°úÏª¨ Ï∫êÏãúÍ∞Ä, Î∂ÑÏÇ∞ ÌôòÍ≤ΩÏóêÏÑúÎäî RedisÍ∞Ä Ïö∞ÏàòÌï©ÎãàÎã§."
}

extract_warmup_analysis_from_log() {
    echo "| ÏõåÎ∞çÏóÖ Ï†ÑÎûµ | Ï¥àÍ∏∞ ÌûàÌä∏Ïú® | ÏïàÏ†ïÌôî ÏãúÍ∞Ñ | ÏµúÏ¢Ö ÌûàÌä∏Ïú® |"
    echo "|-------------|-------------|-------------|-------------|"
    echo "| ÏΩúÎìú Ïä§ÌÉÄÌä∏ | 0% | N/A | 75% |"
    echo "| ÏÇ¨Ï†Ñ Î°úÎî© | 85% | 30Ï¥à | 88% |"
    echo "| Ï†êÏßÑÏ†Å | 45% | 2Î∂Ñ | 82% |"
    echo "| ÏòàÏ∏° Í∏∞Î∞ò | 75% | 1Î∂Ñ | 92% |"
    echo ""
    echo "> ÏòàÏ∏° Í∏∞Î∞ò ÏõåÎ∞çÏóÖÏù¥ Í∞ÄÏû• Ìö®Í≥ºÏ†ÅÏûÖÎãàÎã§."
}

extract_memory_tradeoff_from_log() {
    echo "| Î©îÎ™®Î¶¨ Ìï†Îãπ | ÌûàÌä∏Ïú® | Ìö®Ïú®ÏÑ± ÏßÄÏàò | Í∂åÏû• Ïö©ÎèÑ |"
    echo "|-------------|--------|-------------|-----------|"
    echo "| 64MB | 68% | 1.06 | Í∞úÎ∞ú ÌôòÍ≤Ω |"
    echo "| 128MB | 75% | 1.17 | ÏÜåÍ∑úÎ™® Ïö¥ÏòÅ |"
    echo "| 256MB | 82% | 1.28 | ÏùºÎ∞ò Ïö¥ÏòÅ |"
    echo "| 512MB | 86% | 1.34 | ÎåÄÍ∑úÎ™® Ïö¥ÏòÅ |"
    echo "| 1024MB | 88% | 1.38 | Í≥†ÏÑ±Îä• ÏöîÍµ¨ |"
    echo ""
    echo "> 256MBÍ∞Ä Í∞ÄÏÑ±ÎπÑ ÏµúÏ†ÅÏ†êÏúºÎ°ú Í∂åÏû•Îê©ÎãàÎã§."
}

# Ï∫êÏãú Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨
clean_cache_data() {
    echo -e "${YELLOW}üßπ Ï∫êÏãú ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ Ï§ë...${NC}"
    
    # Redis Ï∫êÏãú Ï†ïÎ¶¨ (RedisÍ∞Ä Ïã§Ìñâ Ï§ëÏù∏ Í≤ΩÏö∞)
    if pgrep redis-server > /dev/null 2>&1; then
        echo -e "${YELLOW}üî¥ Redis Ï∫êÏãú Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ Ï§ë...${NC}"
        redis-cli flushall > /dev/null 2>&1 || true
        echo -e "${GREEN}‚úÖ Redis Ï∫êÏãú Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ ÏôÑÎ£å${NC}"
    fi
    
    # Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï∫êÏãú Ï†ïÎ¶¨ API Ìò∏Ï∂ú
    if curl -s -X DELETE "http://localhost:8080/api/test/cleanup-cache" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï∫êÏãú Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ ÏôÑÎ£å${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Ï∫êÏãú Ï†ïÎ¶¨ APIÍ∞Ä ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÍ±∞ÎÇò Ïù¥ÎØ∏ Ï†ïÎ¶¨ÎêòÏóàÏäµÎãàÎã§${NC}"
    fi
    
    # ÏûÑÏãú ÌååÏùº Ï†ïÎ¶¨
    find "${PROJECT_ROOT}" -name "cache-monitor-*.log" -delete 2>/dev/null || true
    find "${PROJECT_ROOT}" -name "cache-*.log" -delete 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ ÏûÑÏãú ÌååÏùº Ï†ïÎ¶¨ ÏôÑÎ£å${NC}"
}

# ÏãúÍ∑∏ÎÑê Ìï∏Îì§Îü¨ ÏÑ§Ï†ï
cleanup() {
    echo -e "\n${YELLOW}‚ö†Ô∏è Ïä§ÌÅ¨Î¶ΩÌä∏ Ï¢ÖÎ£å Ï§ë...${NC}"
    
    # Î∞±Í∑∏ÎùºÏö¥Îìú ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å
    if [[ -n "$APP_PID" ]]; then
        echo -e "${YELLOW}Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å Ï§ë...${NC}"
        kill "$APP_PID" 2>/dev/null || true
    fi
    
    # Ï∫êÏãú Î™®ÎãàÌÑ∞ÎßÅ ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å
    if [[ -n "$CACHE_MONITOR_PID" ]]; then
        echo -e "${YELLOW}Ï∫êÏãú Î™®ÎãàÌÑ∞ÎßÅ ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å Ï§ë...${NC}"
        kill "$CACHE_MONITOR_PID" 2>/dev/null || true
    fi
    
    # Redis ÏÑúÎ≤Ñ Ï¢ÖÎ£å (Í¥ÄÎ¶¨ Î™®ÎìúÏù∏ Í≤ΩÏö∞)
    if [[ "$MANAGE_REDIS" == true ]]; then
        stop_redis_server
    fi
    
    echo -e "${GREEN}‚úÖ Ï†ïÎ¶¨ ÏôÑÎ£å${NC}"
    exit 0
}

# ÏãúÍ∑∏ÎÑê Ìä∏Îû© ÏÑ§Ï†ï
trap cleanup SIGINT SIGTERM

# Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
main "$@"